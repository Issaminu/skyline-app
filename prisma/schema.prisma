generator js {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

generator zod {
  provider = "prisma-zod-generator"
}

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                  Int            @id @default(autoincrement())
  name                String
  email               String         @unique
  password            String
  phone               String
  image               String
  isEmailVerified     Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  residentOfBuildings Building[]     @relation("Residents")
  adminOfBuildings    Building[]     @relation("Admins")
  creatorOfBuildings  Building[]     @relation("Creator")
  Contributions       Contribution[]
  Expenses            Expense[]
  InvitationsSent     Invitation[]   @relation("Sender")
  InvitationsReceived Invitation[]   @relation("Receiver")
}

model Building {
  id        Int      @id @default(autoincrement())
  name      String
  city      String
  address   String
  surface   Float
  thumbnail String
  houses    House[]
  residents User[]   @relation("Residents")
  admins    User[]   @relation("Admins")
  creator   User     @relation("Creator", fields: [creatorId], references: [id])
  creatorId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum HouseStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

model House {
  id            Int            @id @default(autoincrement())
  name          String
  size          Float
  status        HouseStatus
  Building      Building       @relation(fields: [buildingId], references: [id])
  buildingId    Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Contributions Contribution[]
  Invitations   Invitation[]
}

model Contribution {
  id            Int      @id @default(autoincrement())
  amount        Float
  contributor   User     @relation(fields: [contributorId], references: [id])
  contributorId Int
  house         House    @relation(fields: [houseId], references: [id])
  houseId       Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Expense {
  id          Int      @id @default(autoincrement())
  beneficiary String
  admin       User     @relation(fields: [adminId], references: [id])
  adminId     Int
  amount      Float
  explanation String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Invitation {
  id         Int      @id @default(autoincrement())
  status     String
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  receiverId Int
  house      House    @relation(fields: [houseId], references: [id])
  houseId    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
